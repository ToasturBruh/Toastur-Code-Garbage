@name RSC Realistic Steam Control Community Edit
@inputs Ignite Damper AddCoal AddWater Drivers:array Pod:entity EmBrake Trucks:array
@outputs Active Warmup BrakeInfo:array MPH KPH V Reverser R8 Throttle Brake Coal Water Steam Temp Cocks Firebox:vector CPU CONSTANT OM LBQ IHQ THQ ABQ Force BrakingForce BrakingMul
@outputs Emergency LocoBrakePressure AB16M_Notch LB16M_Notch AB26L LB26L Spin Compressing
@persist [Controls Routing]:table Alternate:string ReverserF ReverserB Locked WQ Force Driver:entity Spin
@persist [E O B]:entity Mul Band BrakeMul [Idle Fire Wheels Coaling Injector InjectorOff ChuffLO ChuffHI]:string ChuffLoops:array ChuffLoopThresholds:array UseKPH Fireman 
@persist MainRes Compressing [CompressorOn CompressorOff]:string NumCompressors AirBrakeType IncreaseTrainBrake EqualRes [Lever_26L Lever_16M AirBrakeApply AirBrakeRelease Lever_LocoBrake LocoBrakeRelease]:string DecreaseTrainBrake 
@persist CarCount BrakeLine IncreaseLocoBrake DecreaseLocoBrake LB26L_ClickQ  EmergencyBrake [EmergencyBrakeSound BrakeScreech]:string Moving BQ Threshold_Hard BPQ BrakeForce
@persist CarCount_Init HandBrake HBQ MaxTrainBrakeForce MaxLocoBrakeForce Switching
@persist ShovelRate BurnRate InjectRate BoilRate HeatRate ThetaDist CN CM Diameter ChuffQ DRV Johnson_Bar
@persist SoundLevel EchoLevel DSPIDX Clt Version:string


@inputs  Whistle1 Whistle2 Chuff1 Chuff2 Chuff3 Chuff4
@outputs ParticleOn Particle:string WhistleParticle:string Safeties WOn Clt
@persist PStages:array Soot SootStage ThrottleStage Decayrate SafteyThresh WOn WBoth WhistleParticle:string

@inputs C1L C2L C1R C2R Base:entity Base2:entity Base3:entity Base4:entity
@persist C1L C2L C1R C2R ThrottleUpper ThrottleLower


#Sound testing
#@outputs IsPlaying
@trigger 
@model models/beer/wiremod/watersensor.mdl

#Master Version 1.6
#Community Version 1.1
#Rusty PT edit V0.25

#Changelog

#DSP edit by Toast
#Edited again by Mag for sound improvements lul
#Edited again by The Big E to make it more Fun To Run (TM) (Wheelslip, built-in particle systems)
#Edited again by The Big E again to make the chuffing sync better with wheel rotation

#Community Edit V1.2
Version = "1.2"

#[
SETUP INSTRUCTIONS:
0 - (You shouldn't have to do this unless you know what you're doing) Configure chip.
1 - Place the e2 on the rear of a steam locomotive's baseplate and leave it welded.
2 - Create an ADVANCED Entity Marker and link it to all the locomotive's DRIVER wheels if if uses a PROP base.
    2.1 - If the locomotive uses a HOLO base, you'll want to wire all SLIDER axles/bogies on the locomotive to another ADVANCED Entity Marker.
3 - Wire Drivers[ARRAY] to the entity marker if it uses a PROP base, otherwise wire Trucks[ARRAY] to the entity marker.
4 - Wire Pod:entity to the locomotive's pod controller Entity:entity output.
5 - Wire Ignite to either a pod controller key or a NON-TOGGLED button.
6 - If manual fireman mode is desired: wire Damper, AddCoal, and AddWater to either pod controller keys or wire buttons (Can be toggled or non-toggled).
7 - Set up screens, gauges, indicators, heiroglyphs, whatever so you can see relevant information like speed, throttle setting, water levels, etc.

The rest of the steps are optional but neat.
8 - Put a wire light on the firebox and wire it to Firebox[VECTOR]. It'll glow in accordance with the temperature level!
9 - Wire the Base1 through Base4 inputs to the 4 cylinder cock particle emitters on the pistons, and Wire C1L through C2R to their corresponding outputs on the holobase.
10- Wire up the smoke/whistle particles, remember to wire "interval" on the wire emitters to the On outputs alongside everything else you wire


One last little tip: the "CONSTANT" output is a constant value of 1. Very Handy.

FIREMAN'S GUIDE:
Keep Coal and Water around 100. If you add too much of either, temperature and steam generation gets nerfed.
Keep Temperature and Steam as high as you can. Max is 200.
If your temperature is sinking, use the Damper. It will boost your temperature greatly but will eat a lot more coal.

DRIVER'S GUIDE:
The Reverser increments by 1/4ths from -1 to +1. More extreme reverser values (closer to 1) will give you more starting force but a lower top speed.
As you approach the top of your "power band," you will stop accelerating until you lower the reverser.
Reverser values of 0.125 or -0.125 give you maximum horsepower (and by extension top speed) but you won't get any starting force.

Happy Steaming!
]#

if(first()|dupefinished()){
    
    Mul = 20 #The General Force Multiplier, determines pulling power. 200 is a good value.
    Band = 15 #The "Power Band." The (Highly Idealized) speed range (in MPH) over which you can go before you need to reduce the reverser value.
    #In Practice it's closer to Half what you have here. 30 is a good value.
    BrakeMul = 1 #The Braking force multiplier, independent of the trainline airbrakes. 2 is a good value to start.
    SoundLevel = 85 #This setting controls how far the main chugging can be heard. 85 is a good number.
    EchoLevel = 110 #This setting controls how far the chugging echo can be heard. 20-40 units above SoundLevel is good.
    
    Fireman = 0 #If 0, automatic fireman. If 1, fireman is required.
    DRV = 1 #If 1, you have near continuous backwards and forwards reverser movement. If 2, you get 6 reverser positions.
    Johnson_Bar = 0 #If 1, reverser will behave like a Johnson Bar reverser. If 0, will behave like Walschaerts.
    
    
    #--------------
    #Control Config
    #--------------
    
    #You can actually change this, but be careful.
    #Wiremod key names do not always coincide with source key names!
    
    Alternate = "lshift" #When pressing this key, all controls with "!ALT" next to them will be triggered, and all the other will be ignored.
    
    Controls["ReverserF",string]        = "w"
    Controls["ReverserB",string]        = "s"
    
    Controls["IncreaseThrottle",string] = "d"
    Controls["DecreaseThrottle",string] = "a"
    
    Controls["IncreaseTrainBrake",string]    = "space"
    Controls["DecreaseTrainBrake",string]    = "ralt"
    
    Controls["IncreaseLocoBrake",string] = "t"
    Controls["DecreaseLocoBrake",string] = "f"
    
    
    Controls["EmergencyBrake",string] = "b"
    
    Controls["HandBrake",string] = "h" 
    
    
    #Ignore this
    ControlPrintOrder = array("ReverserF","ReverserB","IncreaseThrottle","DecreaseThrottle","IncreaseDynamics","DecreaseDynamics","IncreaseTrainBrake","DecreaseTrainBrake","IncreaseLocoBrake","DecreaseLocoBrake","EmergencyBrake","HandBrake","Sander")
    
    
    
    #Don't change these unless you absolutely have to
    ShovelRate = 5
    InjectRate = 0.5
    BurnRate = 0.105
    HeatRate = 0.8
    BoilRate = 0.105
    
    #Suddenly Sounds! Don't change these unless you know what you're doing.
    Idle = "moztrainsounds/steam/generic/blower.wav"
    Fire = "usa_locomotive_sounds_3/steam/fire/fire2.wav"
    Wheels = "gsgtrainsounds/misc/wheels_jointed.wav"
    Coaling = "moztrainsounds/steam/generic/coal_shoveling_loop.wav"
    Injector = "moztrainsounds/steam/generic/water_injectors_loop.wav"
    Injector_Off = "moztrainsounds/steam/generic/water_injectors_end.wav"
    
    #Specify the "1" chuff sound. E2 will automatically pick out the "2" "3" and "4"
    ChuffLO = "moztrainsounds/steam/grange/chuffs/bark1.wav"
    ChuffHI = "moztrainsounds/steam/grange/chuffs/bark1.wav"
    
    ChuffLoops = array(
        "moztrainsounds/steam/grange/chuffs/chuffloop1.wav",
        "moztrainsounds/steam/grange/chuffs/chuffloop2.wav",
        "moztrainsounds/steam/grange/chuffs/chuffloop3.wav",
        "moztrainsounds/steam/grange/chuffs/chuffloop4.wav",
        "moztrainsounds/steam/grange/chuffs/chuffloop5.wav",
        "moztrainsounds/steam/grange/chuffs/chuffloop6.wav",
        "moztrainsounds/steam/grange/chuffs/chuffloop7.wav",
        "moztrainsounds/steam/grange/chuffs/chuffloop8.wav"
    )
    
    ChuffLoopThresholds = array( #Minimum speeds to switch to the corresponding chuff sound. THIS ARRAY SHOULD HAVE ONE MORE ELEMENT IN IT THAN THE CHUFFLOOPS ARRAY.
        13, #First Loop Sound
        17,
        20,
        25,
        30,
        35,
        40,
        45, #Last Loop Sound
        
        60 #This is the top speed of the locomotive for sound purposes.
    )
    
    UseKPH = 0 #Speed units to use for ChuffLoopThresholds. 0: use MPH. 1: Use KPH
    
    Lever_16M = "trans_train_sounds/controls/aar/auto_lever_move.wav"
    Lever_26L = "trans_train_sounds/controls/aar/auto_air_apply_initial_alt.wav"
    Lever_LocoBrake = "loknoisbygeordie/steam/brakes/indy_brake_set_2.wav"
    Lever_HandBrake = "loknoisbygeordie/steam/brakes/handbrake_set_2.wav"
    BrakeScreech = "steam/wheels/brake_squeal_1_loop.wav"             #Brake Screech
    AirBrakeApply = "trans_train_sounds/controls/kc92/6sl_service.wav"     #Sounds for Trainline Airbrakes
    AirBrakeRelease = "trans_train_sounds/controls/kc92/6sl_release.wav"   
    LocoBrakeRelease = "loknoisbygeordie/steam/brakes/indy_brake_release.wav" #Locomotive brakes' apply sounds are very quiet so we just included a release.
    EmergencyBrakeSound = "trans_train_sounds/controls/aar/auto_lever_emergency.wav"  #The sound of the engineer shitting his pants
    CompressorOn = "loknoisbygeordie/steam/misc/air_pump5_loop_slow.wav"
    CompressorOff = "loknoisbygeordie/steam/misc/air_pump5_end_slow.wav"
    
    
    Diameter = 36 #Wheel DIAMETER, in Source Units. This is important for sound calculations!
    
    # Particle Config (Rusty's smoke code)
    # made by Da Rustyrail
    Decayrate=10 ##How fast coal dust dissapears from the smoke (set to 0 for constant smoke color)
    
    # particles can also be 'null' which won't play anything
    PStages = array("clag_2stroke_2","White_100_Thin","White_100_Medium","White_100_Thick","Gray_100_Thin","Gray_100_Medium","Gray_100_Thick","Black_100_Thin","Black_100_Medium","Black_100_Thick")
    WhistleParticle="White_100_Thin"
    
    Soot=50 #set the starting smoke color
    SafteyThresh=180 #The pressure at which the safety valves open
    
    
    #Holoslip Config
    
    ThrottleUpper=7 #Upper Throttle Threshold to be passed to start wheelslipping
    ThrottleLower=5 #Lower Throttle threshold to go below to stop wheelslipping
    
    
    
    
    
    #End of Config
        
    holoCreate(1,entity():toWorld(vec()))
    holoScale(1,vec(0))
    holoParent(1,entity())
    
    holoCreate(2,entity():toWorld(vec()))
    holoScale(2,vec(0))
    holoParent(2,entity())
    
    ThetaDist = 0
    
    CN = 1
    CM = 5
    ChuffQ = 0
    Active = Warmup = 0
    if(Fireman){
        Coal = Water = 50
        Temp = Steam = 0
    }else{
        Coal = Steam = Temp = Water = 100
    }
    Cocks = 0
    Throttle = Brake = Reverser = 0
    SwapQ = DQ = WQ = CQ = 0
    CONSTANT = 1
    
    E = entity()
    B = E:isWeldedTo()
    O = owner()
    runOnChat(1)
    
 foreach(K,V:string = Controls){
        if(V:find(" !ALT")){
            Routing[K,number] = 1
            local EXP = V:explode(" ")
            Controls[K,string] = EXP[1,string]
        }else{
            Routing[K,number] = 0
        }
    }

 function number entity:extraProps(Init){
        local Extra = Switching ? 0 : floor((E:getConstraints():count() - Init)/3)
        MaxTrainBrakeForce = BrakeMul*Extra/(70)
        return Extra
        
    }        
    
    function void array:abRest(){
        local Ents = E:getConstraints()
        foreach(K,V:entity = Ents){
            V:propPhysicalMaterial("phx_tire_normal")
        }
    }
    function void entity:abRelease(){
        local Ents = E:getConstraints()
        local Driverent=Drivers
        foreach(K,V:entity = Driverent){
            V:propPhysicalMaterial("phx_tire_normal")
        }
        foreach(K,V:entity = Ents){
            V:propPhysicalMaterial("friction_00")
        }

    }
    if(Fireman){
        timer("heartbeat",500)
    }
    timer("Chuff",100)

    #Sound Index Table:
    #0 Idle/WarmupFire
    #1 Chuff Loop
    #2 Wheels
    #3 Coaling
    #4 Injectors
    #5 \
    #6  > Discrete Chuffs
    #7 /

    
    ##INIT
    AB16M_Notch = AirBrakeType ? 0 : 1
    LB16M_Notch = -1
    
    SQ = 0
    On = 0
    NQ = 0
    DNQ = 0
    TQ = 0
    RevQ = 0
    ABQ = 0
    LBQ = 0
    WQ = 0
    BQ = 0
    Mode3Q = 0
    
    MainRes = 0
    EqualRes = 0
    BrakeLine = 0
    BrakeCyl = 0
    AirBrakeType = 0
    
    #MaxER = AirBrakeType ? 90 : 70
    #AB26L = AirBrakeType ? 45 : 0
    #LB26L = 0
    #TrainBrakePressure = MaxER/2
    LocoBrakePressure = 0
    #ER = 0
    
    BrakeInfo = array(MainRes,EqualRes,BrakeLine,LocoBrakePressure,BrakeCyl)
    
    LB26L_ClickQ = 0
    BPQ = 0
    EMQ = 0
    Locked = 0
    Emergency = 0
    THQ = IHQ = 0
    HBQ = 0
    
    CarCount_Init = E:getConstraints():count()
    NumCompressors=1
    MaxLocoBrakeForce = 300000/70
    MaxTrainBrakeForce = 0
    
    Threshold_Hard = 0.25
    
    runOnHTTP(1)
    httpRequest("https://raw.githubusercontent.com/ToasturBruh/Toastur-Code-Garbage/main/gmod/E2/versions/RSC%3ACE.txt")
    timer("vto",5000)
}
if(clk("vto")){
    print("RSC version check timeout.")
    O:soundPlay(0,0,"lazpack/misc/tractionmotor_explosion.wav")
    runOnHTTP(0)
}elseif(httpClk()){
    stoptimer("vto")
    runOnHTTP(0)
    
    local VExp = Version:explode(".")
    local VMaj = VExp[1,string]:toNumber()
    local VMin = VExp[2,string]:toNumber()
    
    
    local MVer = httpData()
    local MVExp = MVer:explode(".")
    local MVMaj = MVExp[1,string]:toNumber()
    local MVMin = MVExp[2,string]:toNumber()
    
    local Conflict = ((MVMaj > VMaj) | (MVMin > VMaj))
    
    if((MVMaj > VMaj) | (MVMin > VMin)){
        print("RSC is out of date! Your version: "+Version+" Master version: "+MVer)
        O:soundPlay(0,0,"")
    }else{
        print("RSC is up to date!")
        O:soundPlay(0,0,"")
    }
}

interval(50)

        if(clk("THQ")){
            THQ = 0
            soundStop(5)
        }elseif(clk("IHQ")){
            IHQ = 0
            soundStop(5)
        }
        
#========Synchronous
if(clk("interval")){
    
    #Warmup
    if(Warmup){
        if(Steam >= 100){
            Active = 1
            Warmup = 0
            B:soundPlay(0,0,Idle)
            soundPitch(10,0)
            
        }
    }elseif(Active){
        #Running
            
            
    Driver = Pod:driver()
    
    if(Driver){
        
        local Shifting = Driver:keyPressed(Alternate)
        
        local RF = "ReverserF"
        local RB = "ReverserB"
        
        ReverserF = Driver:keyPressed(Controls[RF,string]) & (Routing[RF,number] ? Shifting : !Shifting)
        ReverserB = Driver:keyPressed(Controls[RB,string]) & (Routing[RB,number] ? Shifting : !Shifting)
        
        IncreaseThrottle = Driver:keyPressed(Controls["IncreaseThrottle",string]) & (Routing["IncreaseThrottle",number] ? Shifting : !Shifting)
        DecreaseThrottle = Driver:keyPressed(Controls["DecreaseThrottle",string]) & (Routing["DecreaseThrottle",number] ? Shifting : !Shifting)
        
        IncreaseTrainBrake = Driver:keyPressed(Controls["IncreaseTrainBrake",string]) & (Routing["IncreaseTrainBrake",number] ? Shifting : !Shifting)
        DecreaseTrainBrake = Driver:keyPressed(Controls["DecreaseTrainBrake",string]) & (Routing["DecreaseTrainBrake",number] ? Shifting : !Shifting)
        
        IncreaseLocoBrake = Driver:keyPressed(Controls["IncreaseLocoBrake",string]) & (Routing["IncreaseLocoBrake",number] ? Shifting : !Shifting)
        DecreaseLocoBrake = Driver:keyPressed(Controls["DecreaseLocoBrake",string]) & (Routing["DecreaseLocoBrake",number] ? Shifting : !Shifting)
        
        EmergencyBrake = Driver:keyPressed(Controls["EmergencyBrake",string]) & (Routing["EmergencyBrake",number] ? Shifting : !Shifting)
        
        HandBrake = Driver:keyPressed(Controls["HandBrake",string]) & (Routing["HandBrake",number] ? Shifting : !Shifting)
        Sander = Driver:keyPressed(Controls["Sander",string]) & (Routing["Sander",number] ? Shifting : !Shifting)
    }
    V = -E:velL():z()*1.25
    Spd = abs(V)
    MPH = ((abs(toUnit("mph",V))*4/3)+(Spin^3)-1)*Spin^2 
    KPH = ((abs(toUnit("km/h",V))*4/3)+(Spin^3)-1)*Spin^2
    
    Moving = MPH>Threshold_Hard
    #Wheel Sound
    if(Moving){
        if(!WQ){
            WQ = 1
            B:soundPlay(3,0,Wheels)
        }
        soundPitch(3,MPH*3.3)
    }elseif(!Moving & WQ){
        WQ = 0
        soundStop(3)
    }
        #==========================
        #Train Brake And Loco Brake
        #==========================
        
        #----------
        #Compresors
        #----------
        if((MainRes<30) & !Compressing){
            Compressing = 1
            B:soundPlay(8,0,CompressorOn)
        }elseif((MainRes>150) & Compressing){
            Compressing = 0
            B:soundPlay(8,4,CompressorOff)
        }
        if(Compressing){MainRes += 0.5*NumCompressors}
        
        #--------------------
        #Equalizing Reservoir
        #--------------------
        

            #16M Trainline
            if(IncreaseTrainBrake & (AB16M_Notch<1) & !ABQ){
                ABQ = 1
                Pod:soundPlay(1,1,Lever_16M)
                AB16M_Notch++
            }elseif(DecreaseTrainBrake & (AB16M_Notch>-1) & !ABQ){
                ABQ = 1
                Pod:soundPlay(1,1,Lever_16M)
                AB16M_Notch--
            }elseif(!DecreaseTrainBrake & !IncreaseTrainBrake & ABQ){
                ABQ = 0
            }
            
        #ER Hiss
        if((AB16M_Notch==1) & (EqualRes>0) & !THQ){
            THQ = 1
            Pod:soundPlay(15,4,AirBrakeApply)
            timer("THQ",6000)
        }elseif((AB16M_Notch==-1) & (EqualRes<90) & !THQ){
            THQ = 1
            Pod:soundPlay(15,4,AirBrakeRelease)
            timer("THQ",6000)
        }

        #ER Indexing
        if((AB16M_Notch==1) & (EqualRes>0)){
            EqualRes--
        }elseif((AB16M_Notch==-1) & (EqualRes<90)){
            EqualRes++
        }
        #----------
        #Brake Line
        #----------
        if(changed(CarCount) & (($CarCount)>0)){
            BrakeLine *= (CarCount - $CarCount)/CarCount
        }
        if(BrakeLine > EqualRes){
            #Apply
            BrakeLine -= 1/(CarCount/16 + 1)
            
            
        }elseif(BrakeLine < EqualRes){
            #Release
            if(MainRes >= 30){
                MainRes -= 0.125*(CarCount/4 + 1)/NumCompressors
                BrakeLine += 1/(CarCount/16 + 1)
            }
        }
        if(abs(EqualRes-BrakeLine)<=(1/(CarCount/16 + 1))){
            BrakeLine = EqualRes
        }
        
        #----------------
        #Locomotive Brake
        #----------------

            #16M Independent
            if(IncreaseLocoBrake & (LB16M_Notch<1) & !LBQ){
                LBQ = 1
                LB16M_Notch++
                if(LB16M_Notch==1){Pod:soundPlay(1,1,Lever_LocoBrake)}
            }elseif(DecreaseLocoBrake & (LB16M_Notch>-1) & !LBQ){
                LBQ = 1
                LB16M_Notch--
            }elseif(!DecreaseLocoBrake & !IncreaseLocoBrake & LBQ){
                LBQ = 0
            }
        
        #LB Hiss
        if((LB16M_Notch==-1) & (LocoBrakePressure>0) & !IHQ){
            IHQ = 1
            Pod:soundPlay(15,4,LocoBrakeRelease)
            timer("IHQ",6000)
        }
        
        #LB Indexing
        if((LB16M_Notch==1) & (LocoBrakePressure<90)){
            LocoBrakePressure++
        }elseif((LB16M_Notch==-1) & (LocoBrakePressure>0)){
            LocoBrakePressure--
            
            if(LocoBrakePressure>(90-BrakeLine)){MainRes -= 0.125/NumCompressors}
        }
        
        #Cylinder
        BrakeCyl = max(LocoBrakePressure,90-BrakeLine)/2.5
        
        #Brake Info Array
        BrakeInfo = array(MainRes,EqualRes,BrakeLine,LocoBrakePressure,BrakeCyl)
        
        #Emergency Brake
        if((EmergencyBrake | EmBrake) & !Emergency){
            Emergency = 1
            BrakeLine = 0
            EqualRes = 0
            AB16M_Notch = 2
            
            local Ents = E:getConstraints()
            foreach(K,V:entity=Ents){
                V:propPhysicalMaterial("slipperyslime")
            }
            
            Pod:soundPlay(15,0,EmergencyBrakeSound)
            Pod:soundPlay(1,1,AirBrakeType ? Lever_26L : Lever_16M)
            
            
            Throttle = 0

        }
        
        Brake = (BrakeCyl > 0)
        
        #Brake Screeching Sounds
        local Screech = Moving & Brake & (MPH<8)
        if(Screech & !BQ){
                BQ = 1
            B:soundPlay(16,0,BrakeScreech)
        }elseif(!Screech & BQ){
            BQ = 0
            soundStop(16)
        }
        
        #Train Brake Physprops
        if(Brake & (MPH<Threshold_Hard) & !BPQ){
            BPQ = 1
            Trucks:abRest()
            Locked = 1
            
        }elseif(!Brake & BPQ){
            BPQ = 0
            E:abRelease()
            Locked = 0
            Emergency = 0
            CarCount = E:extraProps(CarCount_Init)
        }
        
        #Handbrake
        if(HandBrake & !HBQ){
            HBQ = 1
            Pod:printDriver("[RLC Pt] Hold key to Apply Handbrakes.")
            timer("HB_Check",1000)
        }elseif(!HandBrake & HBQ){
            HBQ = 0
        }
        
        #Train Brake Force Calculation
        if((MPH>Threshold_Hard)&!Locked){
            if(CarCount<1){
                CarCount = E:extraProps(CarCount_Init)
            }
            local TBF = CarCount*(90-BrakeLine)*MaxTrainBrakeForce
            local LBF = ((90-BrakeLine)>LocoBrakePressure ? (90-BrakeLine) : LocoBrakePressure)*MaxLocoBrakeForce
            BrakingForce = sign(V)*(LBF+TBF)
            
        }else{
            BrakingForce = 0
            #LocoBrakingForce = 0
        }
    

    
        #Throttle
        if(IncreaseThrottle|DecreaseThrottle){
            Throttle += (0.25)*(IncreaseThrottle-DecreaseThrottle)
            Throttle = clamp(Throttle,0,10)
        }
        #Velocity Info

        
        #Cylinder Cocks
        Cocks = (Throttle > 0)&(MPH < 3)
        
        
        #Chuff Sound Selection
        #Chuff Sound Modulation
        
        #Wheelslip
        if(Throttle>(ThrottleUpper*( (MPH/(Band/(1.2+abs(Reverser))))+1))&Spin<(Throttle*(0.6))&Reverser!=0){Spin+=(0.0625)}
        elseif(Throttle<(ThrottleLower*(MPH/(Band/(1.2+abs(Reverser))))+1)&Spin>1&Reverser!=0){Spin-=0.0625}
        elseif(Reverser==0&Spin>1){Spin-=0.0625}        
        
        if(changed(Spin)&Spin<=1.0625){
                if(Spin>1){entity():soundPlay(105,0,"gsgtrainsounds/wheels/wheelslip_loop.wav")}
                elseif(Spin==1){entity():soundPlay(105,0,"gsgtrainsounds/wheels/wheelslip_end.wav")}
            
            }
        
        
        #Force Application
        
        
        local Dir = -E:up()
        local HB = Band/2
        local MV = MPH*sign(V)
        if(Johnson_Bar){
            RShift = 2*HB*Reverser
        }else{
            RShift = 2*(Reverser!=0)*(Reverser >= 0 ? (1 - Reverser) : (-1 - Reverser))*HB
        }
        LB = RShift - HB
        UB = LB + Band
        if((MV > LB)&(MV < UB)&(Reverser!=0)){
            
            Force = (Fireman ? 1 : 1.5)*(Johnson_Bar ? 2 : 1)*(Steam/100)*200*(sign(Reverser)*(1+abs(Reverser)))*Throttle*Mul*((MV - HB - RShift)*(MV + HB - RShift)*(-1/(HB^2))) 
        }else{
            Force = 0
        }
        
        
        B:applyForce(Dir*(Force-(BrakingForce*BrakeMul)))
    }else{
    #Off
        Cocks = 0
    }
   

    ParticleOn=Active

    
    Soot=Soot-Decayrate
    clamp(Soot,0,100)

    if(AddCoal){
        Soot=100
    }
    
    if(changed(Whistle1|Whistle2)){
    WOn=Whistle1|Whistle2
    
    WBoth=Whistle1&Whistle2
    
    WhistleParticle=WBoth ? "White_100_Medium" : "White_100_Thin"
    }


    Safeties=Steam>SafteyThresh
    
    SootStage=(Soot>=33)+(Soot>=66)
    ThrottleStage=(Throttle>0)+(Throttle>=3)+(Throttle>=6)
    
    if(ThrottleStage & (Chuff1|Chuff2|Chuff3|Chuff4)){
        Particle=PStages[ThrottleStage+1+((SootStage==1)*3)+((SootStage==2)*6),string]
    }
    else{
        Particle=PStages[1,string]
    }

    if(C1L==1){Base:soundPlay(100,0,"triggerboyswhistles/safeties.wav")}
    else{soundStop(100,1)} 
    if(C2L==1){Base2:soundPlay(101,0,"triggerboyswhistles/safeties.wav")}
    else{soundStop(101,1)} 
    if(C1R==1){Base3:soundPlay(102,0,"triggerboyswhistles/safeties.wav")}
    else{soundStop(102,1)} 
    if(C2R==1){Base4:soundPlay(103,0,"triggerboyswhistles/safeties.wav")}
    else{soundStop(103,1)} 
 
}else{
#========Asynchronous
    #Ignition
    if(Ignite & ~Ignite){
        if(Active|Warmup){
            Warmup = Active = 0
            Reverser = Throttle = 0
            Coal = Water = Fireman ? 50 : 100
            Temp = Steam = Fireman ? 0 : 100
            soundStop(0)
            soundStop(10)
            soundStop(3)
            Firebox = vec()
        }else{
            if(Fireman){
                
                Warmup = 1
                B:soundPlay(0,0,Fire)
            }else{
                Firebox = vec(255,Temp,(Temp > 100)*(Temp - 100))
                Active = 1
                Warmup = 0
                B:soundPlay(0,0,Idle)
                soundPitch(10,0)
            }
        }
    }
    
    #Controls
    if((ReverserF) | (ReverserB)){
        Reverser += (DRV ? 0.05 : 0.125)*(ReverserF - ReverserB)
        Reverser = clamp(Reverser,-1,1)
        R8 = Reverser*8
    }
    
            #Fireman Controls
        if(Fireman){
            if(~AddCoal){
                if(AddCoal){
                    B:soundPlay(13,0,Coaling)
                }else{
                    soundStop(13)
                }
            }
            if(~AddWater){
                if(AddWater){
                    B:soundPlay(14,0,Injector)
                    soundVolume(14,0.5)
                }else{
                    B:soundPlay(14,3,InjectorOff)
                    soundVolume(14,0.5)
                }
            }
        }
}
if(clk("heartbeat") & Fireman){
#========Fireman Heartbeat
    Coal += AddCoal*ShovelRate - BurnRate*(1+ 3*Damper)*(Active|Warmup)
    Coal = clamp(Coal,0,200)
    
    Temp += (((Coal - 200)*(Coal))/(-10000) - 0.875*!Damper - BoilRate*(Temp > 75)*(1))*HeatRate*(Active|Warmup)
    Temp = clamp(Temp,0,200)
    
    Water += AddWater*InjectRate - (Temp > 75)*BoilRate*(Temp/100)*(Active|Warmup)*0.5
    Water = clamp(Water,0,200)
    
    Steam += (Temp > 75)*(Temp/100)*(Water - 200)*(Water)/(-10000) - (Throttle/3.5)*(abs(Reverser)) - AddWater*InjectRate*4
    Steam = clamp(Steam,0,200)
    
    Firebox = vec(255,Temp,(Temp > 100)*(Temp - 100))*(Active|Warmup)
    
    if(Active & Steam < 75){
        Active = 0
        Warmup = 1
        Throttle = 0
        B:soundPlay(0,0,Fire)
        soundStop(10)
        soundStop(3)
    }
    timer("heartbeat",500)
    #print("Heartbeat")
                                                                                                                                                                                                                                       #nuts balls even
}
if(clk("Chuff")){
    #Chuff
    #print("Chuff")
    if(Active & (MPH > 0.5)){
        
        #if(Int > 150){
        local SampleSpeed = UseKPH ? KPH : MPH
        local CThreshold = ChuffLoopThresholds[1,number]
        if((SampleSpeed*Spin^2) < CThreshold){
            
            if(ChuffQ>0){ChuffQ = 0, soundStop(10) soundStop("LOOPDSP")}
            
            #V in inches per second
            local Circ = _PI*Diameter #Circumference of Wheel; Distance to travel for one revolution
            
            ThetaDist += V/50
            
            Progress = ThetaDist/Circ
            
            local DoChuff = 0
            
            if(ThetaDist > Circ/4){
                ThetaDist += -Circ/4
                DoChuff = 1
            }elseif(ThetaDist < -Circ/4){
                ThetaDist += Circ/4
                DoChuff = 1
            }
            
            if(DoChuff){
            
                local Chf = ((SampleSpeed+Spin^2) < CThreshold/2) ? ChuffLO:replace("1",CN:toString()) : ChuffHI:replace("1",CN:toString())
                #Pod:printDriver(Chf)
                B:soundPlay(CM+30,0,Chf)
                #soundVolume(CM+30,(Throttle / 10))
                #soundVolume(CM+30,0)
                soundLevel(CM+30,SoundLevel)
                #soundDSP(CM+30,0)
                soundVolume(CM+30,Throttle/20 + 0.5)
                
                holoEntity(1):soundPlay((CM+30)*2,0,Chf)
                #soundVolume((CM+30)*2,(Throttle / 10))
                #soundVolume((CM+30)*2,0)
                soundLevel((CM+30)*2,EchoLevel)
                soundDSP((CM+30)*2,24)
                soundVolume((CM+30)*2,Throttle/20 + 0.5)
                
                #IsPlaying = soundPlaying((CM+30))
                
                CN++
                CM++
                if(CN==5){CN=1}
                if(CM==8){CM=5}
            
            }
            timer("Chuff",20)
            
        }else{ #Loop sounds
            
            #Find which one we're using
            local SelectLoopSound = 1
            local MyRangeMin = ChuffLoopThresholds[1,number]
            local MyRangeMax = ChuffLoopThresholds[2,number]
            for(N=2,ChuffLoopThresholds:count()){
                if(SampleSpeed < ChuffLoopThresholds[N,number]){
                    SelectLoopSound = N-1
                    MyRangeMin = ChuffLoopThresholds[N-1,number]
                    MyRangeMax = ChuffLoopThresholds[N,number]
                    break
                }
            }
            
            
            if(ChuffQ != SelectLoopSound){
                ChuffQ = SelectLoopSound
                
                local Snd = ChuffLoops[SelectLoopSound,string]
                
                
                
                B:soundPlay(10,0,Snd)
                soundLevel(10,SoundLevel)
                #soundDSP(10,0)
                
                holoEntity(1):soundPlay("LOOPDSP",0,Snd)
                soundLevel("LOOPDSP",EchoLevel)
                soundDSP("LOOPDSP",24)
                #soundVolume("LOOPDSP",0)

            }
            #OM = 600*Omega
            
            if(Reverser>=0){local OM = 100 + 10*((SampleSpeed+Spin^2) - MyRangeMin)/(MyRangeMax - MyRangeMin)}
            else{local OM = 100 + 10*((SampleSpeed-Spin^2) - MyRangeMin)/(MyRangeMax - MyRangeMin)}
            
            local Clt = ChuffLoopThresholds[SelectLoopSound,number]
            
            #soundPitch(10,OM)
            soundVolume(10,Throttle/15 + (1/3))
            soundPitch(10,(abs(MPH-(Clt-1))*3)+96)
            
            #soundPitch("LOOPDSP",OM)
            soundVolume("LOOPDSP",Throttle*0.8 + 0.2)
            #soundVolume("LOOPDSP",0)
            soundPitch("LOOPDSP",(abs(MPH-(Clt-1))*3)+96)
            
            
            timer("Chuff",100)
        }
    }else{
        soundStop(10)
        soundStop("LOOPDSP")
        soundStop(11)
        timer("Chuff",100)
    }
       
}

#========Chat
if(chatClk(O)){
    local LS = O:lastSaid()
    local Sentence = LS:explode(" ")
    local CMD = Sentence[1,string]
    local ARG = Sentence[2,string]
    
    if(Active){
        #Engine On Commands
        if(CMD==".throttle"){
            hideChat(1)
            Throttle = clamp(ARG:toNumber(),0,10)
            printColor(vec(200),"[RSC] Setting Throttle to ",vec(255),Throttle:toString()+"/10")
        }
        if(CMD==".reverser"){
            hideChat(1)
            local Val = (1+DRV)*4
            Reverser = round(clamp(ARG:toNumber()*Val,-Val,Val))/Val
            printColor(vec(200),"[RSC] Setting Reverser to ",vec(255),Reverser:toString())
            R8 = Reverser*8
        }
        if(CMD==".brake"){
            hideChat(1)
            if(ARG=="1"){
                Brake = 1
                Throttle = 0
                #abSoft()
                printColor(vec(200),"[RSC] Airbrakes ",vec(255,191,0),"Applied")
            }elseif(ARG=="0"){
                Brake = 0
                #abRelease()
                printColor(vec(200),"[RSC] Airbrakes ",vec(0,200,0),"Released")
            }else{
                Brake = 1
                Throttle = 0
                #abHard()
                printColor(vec(200),"[RSC] Airbrakes ",vec(255,0,0),"EMERGENCY")
            }
        }
        
        
    }else{
        #Engine Off Commands
        if(CMD==".fireman"){
            hideChat(1)
            Fireman = ARG:toNumber()
            if(Fireman){
                timer("heartbeat",100)
                Coal = Water = 50
                Temp = Steam = 0
                printColor(vec(200),"[RSC] Manual Fireman ",vec(0,200,0),"Enabled")
            }else{
                
                Coal = Steam = Temp = Water = 100
                printColor(vec(200),"[RSC] Manual Fireman ",vec(200,0,0),"Disabled")
            }
        }
    }
    #Anytime Commands
    if(CMD==".ignite"){
        hideChat(1)
        if(ARG:toNumber()){
            if(Fireman){
                
                Warmup = 1
                B:soundPlay(0,0,Fire)
                printColor(vec(200),"[RSC] Warming Up")
            }else{
                Active = 1
                Warmup = 0
                Firebox = vec(255,Temp,(Temp > 100)*(Temp - 100))
                B:soundPlay(0,0,Idle)
                soundPitch(10,0)
                soundPitch("LOOPDSP",0)
                printColor(vec(200),"[RSC] Boiler On")
            }
        }else{
            Warmup = Active = 0
            Reverser = Throttle = 0
            Coal = Water = Fireman ? 50 : 100
            Temp = Steam = Fireman ? 0 : 100
            Cocks = 0
            soundStop(0)
            soundStop(10)
            soundStop("LOOPDSP")
            soundStop(3)
            printColor(vec(200),"[RSC] Boiler Off")
            Firebox = vec()
        }
    }
    if(CMD==".mul"){
        hideChat(1)
        Mul = ARG:toNumber()
        printColor(vec(200),"[RSC] Force Mul set to ",vec(0,0,255),Mul:toString())
    }
    if(CMD==".band"){
        hideChat(1)
        Band = ARG:toNumber()
        printColor(vec(200),"[RSC] 'Power Band' set to ",vec(0,0,255),Band:toString()+" MPH")
    }
    if(CMD==".brakemul"){
        hideChat(1)
        BrakeMul = ARG:toNumber()
        printColor(vec(200),"[RSC] Braking Mul set to ",vec(0,0,255),BrakeMul:toString())
    }
    if(CMD==".coal"){
            hideChat(1)
            if(Fireman){
                Coal = clamp(ARG:toNumber(),0,200)
                printColor(vec(200),"[RSC] Coal Level set to ",vec(36),Coal:toString()+"%")
            }else{
                printColor(vec(200),"[RSC] Manual Fireman Mode is currently Disabled")
            }
        }
        if(CMD==".water"){
            hideChat(1)
            if(Fireman){
                Water = clamp(ARG:toNumber(),0,200)
                printColor(vec(200),"[RSC] Water Level set to ",vec(36),Water:toString()+"%")
            }else{
                printColor(vec(200),"[RSC] Manual Fireman Mode is currently Disabled")
            }
        }
        if(CMD==".temp"){
            hideChat(1)
            if(Fireman){
                Temp = clamp(ARG:toNumber(),0,200)
                printColor(vec(200),"[RSC]Temperature set to ",vec(36),Temp:toString()+"%")
            }else{
                printColor(vec(200),"[RSC] Manual Fireman Mode is currently Disabled")
            }
        }
        if(CMD==".steam"){
            hideChat(1)
            if(Fireman){
                Steam = clamp(ARG:toNumber(),0,200)
                printColor(vec(200),"[RSC] Steam Pressure set to ",vec(36),Steam:toString()+"%")
            }else{
                printColor(vec(200),"[RSC] Manual Fireman Mode is currently Disabled")
            }
        }
        if(CMD==".commands"){
            hideChat(1)
            printColor(vec(200),"[RSC] Commands List (Type .help <command name> for details)\nACTIVE: .throttle .reverser .brake\nINACTIVE: .fireman\nANYTIME: .ignite .mul .band .brakemul .coal .water .temp .steam")
        }
        if(CMD==".help"){
            hideChat(1)
            switch(ARG){
                case "throttle",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".throttle\n",vec(200),"Syntax: ",vec(255,96,0),".throttle [number]\n",vec(200),"Description: ",vec(255,96,0),"Overrides the throttle setting to this value out of 10\n",vec(200),"Example: ",vec(255,96,0),".throttle 5")
                    break
                case "reverser",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".reverser\n",vec(200),"Syntax: ",vec(255,96,0),".reverser [number]\n",vec(200),"Description: ",vec(255,96,0),"Overrides the reverser setting to this value from -1 to +1\n",vec(200),"Example: ",vec(255,96,0),".reverser 0.25")
                    break
                case "brake",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".brake\n",vec(200),"Syntax: ",vec(255,96,0),".brake [boolean]\n",vec(200),"Description: ",vec(255,96,0),"1 applies, 0 releases. Leave blank for Emergency Brake.\n",vec(200),"Example: ",vec(255,96,0),".brake 1")
                    break
                case "ignite",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".ignite\n",vec(200),"Syntax: ",vec(255,96,0),".ignite [boolean]\n",vec(200),"Description: ",vec(255,96,0),"1 Ignites the fire, 0 extinguishes it.\n",vec(200),"Example: ",vec(255,96,0),".ignite 1")
                    break
                case "fireman",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".fireman\n",vec(200),"Syntax: ",vec(255,96,0),".fireman [boolean]\n",vec(200),"Description: ",vec(255,96,0),"Sets Manual Fireman Mode to this value.\n",vec(200),"Example: ",vec(255,96,0),".fireman 1")
                    break
                case "mul",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".mul\n",vec(200),"Syntax: ",vec(255,96,0),".mul [number]\n",vec(200),"Description: ",vec(255,96,0),"Sets the Force multiplier to this value.\n",vec(200),"Example: ",vec(255,96,0),".mul 120")
                    break
                case "band",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".band\n",vec(200),"Syntax: ",vec(255,96,0),".band [number]\n",vec(200),"Description: ",vec(255,96,0),"Sets the (Ideal) Speed band before you need to lower reverser setting.\n",vec(200),"Example: ",vec(255,96,0),".band 30")
                    break
                case "brakemul",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".brakemul\n",vec(200),"Syntax: ",vec(255,96,0),".brakemul [number]\n",vec(200),"Description: ",vec(255,96,0),"Sets the Independent Brake force Multiplier\n",vec(200),"Example: ",vec(255,96,0),".brakemul 400")
                    break
                case "coal",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".coal\n",vec(200),"Syntax: ",vec(255,96,0),".coal [number]\n",vec(200),"Description: ",vec(255,96,0),"Sets the Coal Level out of 200.\n",vec(200),"Example: ",vec(255,96,0),".coal 100")
                    break
                case "water",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".water\n",vec(200),"Syntax: ",vec(255,96,0),".water [number]\n",vec(200),"Description: ",vec(255,96,0),"Sets the Water Level out of 200.\n",vec(200),"Example: ",vec(255,96,0),".water 100")
                    break
                case "temp",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".temp\n",vec(200),"Syntax: ",vec(255,96,0),".temp [number]\n",vec(200),"Description: ",vec(255,96,0),"Sets the Temperature Level out of 200.\n",vec(200),"Example: ",vec(255,96,0),".temp 100")
                    break
                case "steam",
                    printColor(vec(200),"[RSC] Command: ",vec(255,96,0),".steam\n",vec(200),"Syntax: ",vec(255,96,0),".steam [number]\n",vec(200),"Description: ",vec(255,96,0),"Sets the Steam Pressure Level out of 200.\n",vec(200),"Example: ",vec(255,96,0),".steam 100")
                    break
                default,
                    printColor(vec(200),"[RSC] Command not found. Type .commands for a list of commands.")
                    break
            }
        }
    
}



CPU = floor(cpuUsage()*1000000)
